name: CI

on:
  # GitHub has started calling new repo's first branch "main" https://github.com/github/renaming
  # Existing codes likely still have "master" as the primary branch
  # Both are tracked here to keep legacy and new codes working
  push:
    branches:
      - "master"
      - "main"
  pull_request:
    branches:
      - "master"
      - "main"
  schedule:
    # Nightly tests run on master by default:
    #   Scheduled workflows run on the latest commit on the default or base branch.
    #   (from https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)
    - cron: "0 0 * * *"

jobs:
  test:
    name: Test on ${{ matrix.os }}, Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest]  # , windows-latest
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v1

    - name: Additional info about the build
      shell: bash
      run: |
        uname -a
        df -h
        ulimit -a


    # More info on options: https://github.com/conda-incubator/setup-miniconda
    - uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ matrix.python-version }}
        environment-file: devtools/conda-envs/test_env.yaml

        channels: conda-forge,defaults

        activate-environment: test
        auto-update-conda: false
        auto-activate-base: false
        show-channel-urls: true

    - name: Install package

      # conda setup requires this special shell
      shell: bash -l {0}
      run: |
        python setup.py develop
        conda list


    - name: Run tests

      # conda setup requires this special shell
      shell: bash -l {0}

      run: |
        pytest -v --cov=lipyds --cov-report=xml --color=yes lipyds/tests/

    - name: CodeCov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

  build_docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: setup_miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ matrix.python-version }}
        environment-file: docs/requirements.yaml

        channels: conda-forge,defaults

        activate-environment: test
        auto-update-conda: false
        auto-activate-base: false
        show-channel-urls: true
    
    - name: Install package
      shell: bash -l {0}
      run: |
        python setup.py develop
        conda list

    - name: build_docs
      run: |
        python setup.py build_sphinx -E

    - name: deploy_docs
      if: github.event_name != 'pull_request'
      env:
        GH_USER: github-actions
        GH_EMAIL: "github-action@users.noreply.github.com"
        GH_REPOSITORY: "github.com/${{ github.repository }}.git"
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        URL: https://docs.mdanalysis.org
      run: |
        # set up environment variables
        # cannot execute bash to make variables in env section
        # export URL for the Python script $UPDATE_JSON
        export URL
        export VERSION=$(cd package/MDAnalysis; python -c 'import version; print(version.__version__)')
        UPDATE_JSON=$(pwd)/maintainer/update_json_stubs_sitemap.py
        BRANCH="${GITHUB_REF#refs/heads/}"

        # the below turns off non-blocking as it causes large writes to stdout to fail
        # (see https://github.com/travis-ci/travis-ci/issues/4704)
        # commented out as this is not a problem with gh-actions
        # python -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); fcntl.fcntl(sys.stdout, fcntl.F_SETFL, flags&~os.O_NONBLOCK);'
        cd package/doc/html/html

        # move docs into version subfolder
        mkdir ../${VERSION} && mv * ../${VERSION} && mv ../${VERSION} $VERSION

        # set up git
        REV=$(git rev-parse --short HEAD)
        git init
        git config user.name $GH_USER
        git config user.email $GH_EMAIL
        git remote add upstream "https://${GH_USER}:${GH_TOKEN}@${GH_REPOSITORY}"
        git fetch --depth 50 upstream $BRANCH gh-pages
        git reset upstream/gh-pages

        # redirects and copies
        mkdir latest
        python $UPDATE_JSON
        touch .
        touch .nojekyll

        git add -A ${VERSION}/
        git add .nojekyll versions.json *.xml *.html index.html latest

        for dirname in dev stable documentation_pages ; do
          if [ -d $dirname ]; then git add $dirname; fi
        done

        # check for anything to commit
        # https://stackoverflow.com/questions/3878624/how-do-i-programmatically-determine-if-there-are-uncommited-changes
        git diff-index --quiet HEAD -- || git commit -m "rebuilt html docs for version ${VERSION} from branch ${BRANCH} with sphinx at ${REV}"
        git push -q upstream HEAD:gh-pages
